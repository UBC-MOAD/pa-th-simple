""" This test module is set to test the output of an advection scheme given the following input parameters:
"""
from __future__ import division
import numpy as np
import ThPa2D



time = (0, 0.001, 2, 3, 5, 10)
t = time[0]
T = time[1]
dt = 0.001 
V = 0.02/1000*365.*86400.  # first number in mm/s, corrections give needed value in m/yr ~ 630
xmin = 1
xmax = 1e6
zmin = 0
zmax = 5e3
nz = 8
nx = 8
ng = 1
g = ThPa2D.FDgrid(nx, nz, ng)
h = ThPa2D.FDgrid(nx, nz, ng)
# chemistry
k_ad, k_de, Q = ThPa2D.k_sorp('Th', xmin, xmax, zmin, zmax, nx, nz)
S = 500
# velocity = u1
u1, flowfig, init = ThPa2D.u_simple(g, h, xmin, xmax, zmin, zmax, nx, nz, V, 'Th')
# velocity = u2
u2, flowfig, init = ThPa2D.u_complex(g, h, xmin, xmax, zmin, zmax, nx, nz, V, 'Th')



def test_DTh_u1():
    afterg, afterh = ThPa2D.upwind(g, h, dt, t, T, u1, k_ad, k_de, Q, S)

    beforeg = [[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
         0.        ,  0.        ,  0.        ],
       [ 0.00023934,  0.00026581,  0.00026581,  0.00026581,  0.0002658 ,
         0.0002658 ,  0.0002658 ,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
         0.        ,  0.        ,  0.        ]]
    np.testing.assert_allclose(afterg.a, beforeg) 

g = ThPa2D.FDgrid(nx, nz, ng)
h = ThPa2D.FDgrid(nx, nz, ng)
def test_PTh_u1():
    afterg, afterh = ThPa2D.upwind(g, h, dt, t, T, u1, k_ad, k_de, Q, S)

    beforeh = [[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00],
       [  1.19288922e-06,   1.45666738e-06,   1.45668671e-06,
          1.45669644e-06,   1.45663832e-06,   1.45664805e-06,
          1.45665122e-06,   0.00000000e+00],
       [  6.00288359e-07,   7.33486476e-07,   7.33477995e-07,
          7.33477181e-07,   7.33514994e-07,   7.33514181e-07,
          7.33512483e-07,   0.00000000e+00],
       [  5.98771318e-07,   7.31467080e-07,   7.31465541e-07,
          7.31468093e-07,   7.31475844e-07,   7.31478397e-07,
          7.31478244e-07,   0.00000000e+00],
       [  5.98768147e-07,   7.31462508e-07,   7.31461002e-07,
          7.31463561e-07,   7.31471206e-07,   7.31473748e-07,
          7.31473596e-07,   0.00000000e+00],
       [  5.98769471e-07,   7.31464122e-07,   7.31461293e-07,
          7.31461086e-07,   7.31473816e-07,   7.31473479e-07,
          7.31473190e-07,   0.00000000e+00],
       [  5.98769471e-07,   7.31464446e-07,   7.31461579e-07,
          7.31461238e-07,   7.31473669e-07,   7.31473192e-07,
          7.31472866e-07,   0.00000000e+00],
       [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00]]

    np.testing.assert_allclose(afterh.a, beforeh) 
g = ThPa2D.FDgrid(nx, nz, ng)
h = ThPa2D.FDgrid(nx, nz, ng)
def test_DTh_u2():
    afterg, afterh = ThPa2D.upwind(g, h, dt, t, T, u2, k_ad, k_de, Q, S)

    beforeg = [[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
         0.        ,  0.        ,  0.        ],
       [ 0.00023934,  0.00026581,  0.00026581,  0.00026581,  0.00026581,
         0.00026581,  0.00026581,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
         0.        ,  0.        ,  0.        ]]

    np.testing.assert_allclose(afterg.a, beforeg)
g = ThPa2D.FDgrid(nx, nz, ng)
h = ThPa2D.FDgrid(nx, nz, ng)
def test_PTh_u2():
    afterg, afterh = ThPa2D.upwind(g, h, dt, t, T, u2, k_ad, k_de, Q, S)

    beforeh = [[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00],
       [  1.19288922e-06,   1.45666738e-06,   1.45667847e-06,
          1.45666738e-06,   1.45666738e-06,   1.45666738e-06,
          1.45667285e-06,   0.00000000e+00],
       [  6.00295799e-07,   7.33496088e-07,   7.33501694e-07,
          7.33496088e-07,   7.33496088e-07,   7.33496088e-07,
          7.33498846e-07,   0.00000000e+00],
       [  5.98775316e-07,   7.31471968e-07,   7.31471984e-07,
          7.31471968e-07,   7.31471968e-07,   7.31471968e-07,
          7.31471970e-07,   0.00000000e+00],
       [  5.98772124e-07,   7.31467365e-07,   7.31467365e-07,
          7.31467365e-07,   7.31467365e-07,   7.31467365e-07,
          7.31467365e-07,   0.00000000e+00],
       [  5.98772118e-07,   7.31467356e-07,   7.31467356e-07,
          7.31467356e-07,   7.31467356e-07,   7.31472923e-07,
          7.31472923e-07,   0.00000000e+00],
       [  5.98772118e-07,   7.31467356e-07,   7.31467356e-07,
          7.31467356e-07,   7.31467356e-07,   7.31472927e-07,
          7.31472927e-07,   0.00000000e+00],
       [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00]]

    np.testing.assert_allclose(afterh.a, beforeh)

