""" This test module is set to test the output of an advection scheme given the following input parameters:
"""
from __future__ import division
import numpy as np
import ThPa2D

# run upwind for following inputs and observe output
time = (0, 0.001, 2, 3, 5, 10)
t = time[0]
T = time[1]
dt = 0.001 
V = 1  # first number in mm/s, corrections give needed value in m/yr ~ 630
xmin = 1
xmax = 1e6
zmin = 0
zmax = 5e3
nz = 8
nx = 8
ng = 1
g = ThPa2D.FDgrid(nx, nz, ng)
h = ThPa2D.FDgrid(nx, nz, ng)
# chemistry
k_ad, k_de, Q = ThPa2D.k_sorp('Th', xmin, xmax, zmin, zmax, nx, nz)
S = 500
# velocity = u1
u1, flowfig, init = ThPa2D.u_simple(g, h, xmin, xmax, zmin, zmax, nx, nz, V, 'Th')
# velocity = u2
u2, flowfig, init = ThPa2D.u_complex(g, h, xmin, xmax, zmin, zmax, nx, nz, V, 'Th')


def test_DTh_u1():
    afterg, afterh = ThPa2D.upwind(g, h, t, T, u1, k_ad, k_de, Q, S, dt)

    beforeg = [[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
         0.        ,  0.        ,  0.        ],
       [ 0.00023934,  0.00026581,  0.00026581,  0.00026581,  0.00026581,
         0.00026581,  0.00026581,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
         0.        ,  0.        ,  0.        ]]
    np.testing.assert_allclose(afterg.a, beforeg, rtol=1e-7, atol = 3e-4) 

g = ThPa2D.FDgrid(nx, nz, ng)
h = ThPa2D.FDgrid(nx, nz, ng)
def test_PTh_u1():
    afterg, afterh = ThPa2D.upwind(g, h, t, T, u1, k_ad, k_de, Q, S, dt)

    beforeh = [[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00],
       [  1.19288922e-06,   1.45666738e-06,   1.45666741e-06,
          1.45666742e-06,   1.45666733e-06,   1.45666735e-06,
          1.45666735e-06,   0.00000000e+00],
       [  6.00295787e-07,   7.33496073e-07,   7.33496060e-07,
          7.33496058e-07,   7.33496118e-07,   7.33496117e-07,
          7.33496114e-07,   0.00000000e+00],
       [  5.98775310e-07,   7.31471961e-07,   7.31471958e-07,
          7.31471962e-07,   7.31471975e-07,   7.31471979e-07,
          7.31471978e-07,   0.00000000e+00],
       [  5.98772118e-07,   7.31467357e-07,   7.31467354e-07,
          7.31467359e-07,   7.31467371e-07,   7.31467375e-07,
          7.31467374e-07,   0.00000000e+00],
       [  5.98772114e-07,   7.31467350e-07,   7.31467346e-07,
          7.31467346e-07,   7.31467366e-07,   7.31467365e-07,
          7.31467365e-07,   0.00000000e+00],
       [  5.98772114e-07,   7.31467351e-07,   7.31467346e-07,
          7.31467346e-07,   7.31467366e-07,   7.31467365e-07,
          7.31467364e-07,   0.00000000e+00],
       [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00]]

    np.testing.assert_allclose(afterh.a, beforeh, rtol=1e-7, atol = 1e-4) 
g = ThPa2D.FDgrid(nx, nz, ng)
h = ThPa2D.FDgrid(nx, nz, ng)
def test_DTh_u2():
    afterg, afterh = ThPa2D.upwind(g, h, t, T, u1, k_ad, k_de, Q, S, dt)

    beforeg = [[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
         0.        ,  0.        ,  0.        ],
       [ 0.00023934,  0.00026581,  0.00026581,  0.00026581,  0.00026581,
         0.00026581,  0.00026581,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.00023982,  0.0002664 ,  0.0002664 ,  0.0002664 ,  0.0002664 ,
         0.0002664 ,  0.0002664 ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
         0.        ,  0.        ,  0.        ]]

    np.testing.assert_allclose(afterg.a, beforeg, rtol=1e-7, atol = 2e-4)
g = ThPa2D.FDgrid(nx, nz, ng)
h = ThPa2D.FDgrid(nx, nz, ng)
def test_PTh_u2():
    afterg, afterh = ThPa2D.upwind(g, h, t, T, u1, k_ad, k_de, Q, S, dt)

    beforeh = [[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00],
       [  1.19288922e-06,   1.45666738e-06,   1.45666739e-06,
          1.45666738e-06,   1.45666738e-06,   1.45666738e-06,
          1.45666739e-06,   0.00000000e+00],
       [  6.00295799e-07,   7.33496088e-07,   7.33496097e-07,
          7.33496088e-07,   7.33496088e-07,   7.33496088e-07,
          7.33496093e-07,   0.00000000e+00],
       [  5.98775316e-07,   7.31471968e-07,   7.31471968e-07,
          7.31471968e-07,   7.31471968e-07,   7.31471968e-07,
          7.31471968e-07,   0.00000000e+00],
       [  5.98772124e-07,   7.31467365e-07,   7.31467365e-07,
          7.31467365e-07,   7.31467365e-07,   7.31467365e-07,
          7.31467365e-07,   0.00000000e+00],
       [  5.98772118e-07,   7.31467356e-07,   7.31467356e-07,
          7.31467356e-07,   7.31467356e-07,   7.31467364e-07,
          7.31467364e-07,   0.00000000e+00],
       [  5.98772118e-07,   7.31467356e-07,   7.31467356e-07,
          7.31467356e-07,   7.31467356e-07,   7.31467364e-07,
          7.31467364e-07,   0.00000000e+00],
       [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00]]
    np.testing.assert_allclose(afterh.a, beforeh, rtol=1e-7, atol = 1e-4)

